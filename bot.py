import logging
import sqlite3
import asyncio
import urllib.parse
import os
import subprocess
import tempfile
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    PreCheckoutQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv()
ADMIN_IDS = [] 
DB_NAME = 'bot_database.db'
PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')
NEW_SCRIPT_PATH = 'new.py'  # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É new.py

SUBSCRIPTION_TYPES = {
    'free': {
        'name': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è',
        'price': 0,
        'currency': 'XTR',
        'daily_requests': None  
    },
    'premium': {
        'name': '–ü—Ä–µ–º–∏—É–º',
        'price': 100,
        'currency': 'XTR',
        'daily_requests': None 
    }
}

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        registration_date TEXT,
        is_admin INTEGER DEFAULT 0
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        subscription_type TEXT,
        start_date TEXT,
        end_date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        request_date TEXT,
        request_type TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS settings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        free_daily_requests INTEGER DEFAULT 5,
        premium_daily_requests INTEGER DEFAULT 15,
        subscription_price INTEGER DEFAULT 100
    )
    ''')
    
    cursor.execute('SELECT COUNT(*) FROM settings')
    if cursor.fetchone()[0] == 0:
        cursor.execute('''
        INSERT INTO settings (
            free_daily_requests, 
            premium_daily_requests, 
            subscription_price
        ) VALUES (?, ?, ?)
        ''', (5, 15, 100))
    
    conn.commit()
    conn.close()
    
    load_settings_to_subscription_types()

def load_settings_to_subscription_types():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –≤ SUBSCRIPTION_TYPES"""
    settings = get_settings()
    if settings:
        SUBSCRIPTION_TYPES['free']['daily_requests'] = settings['free_daily_requests']
        SUBSCRIPTION_TYPES['premium']['daily_requests'] = settings['premium_daily_requests']

def get_db_connection():
    return sqlite3.connect(DB_NAME)

def register_user(user_id, username, first_name, last_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, registration_date)
    VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, datetime.now().isoformat()))
    

    cursor.execute('SELECT COUNT(*) FROM subscriptions WHERE user_id = ?', (user_id,))
    if cursor.fetchone()[0] == 0:
        cursor.execute('''
        INSERT INTO subscriptions (user_id, subscription_type, start_date, end_date)
        VALUES (?, ?, ?, ?)
        ''', (
            user_id, 
            'free', 
            datetime.now().isoformat(), 
            (datetime.now() + timedelta(days=365)).isoformat()
        ))
    
    conn.commit()
    conn.close()

def get_user_subscription(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT s.subscription_type, s.start_date, s.end_date
    FROM subscriptions s
    WHERE s.user_id = ? AND s.end_date > ?
    ORDER BY s.end_date DESC
    LIMIT 1
    ''', (user_id, datetime.now().isoformat()))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        subscription_type, start_date, end_date = result
        return {
            'type': subscription_type,
            'name': SUBSCRIPTION_TYPES[subscription_type]['name'],
            'start_date': datetime.fromisoformat(start_date),
            'end_date': datetime.fromisoformat(end_date)
        }
    return None

def get_today_requests_count(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    today = datetime.now().date().isoformat()
    cursor.execute('''
    SELECT COUNT(*) 
    FROM requests 
    WHERE user_id = ? AND date(request_date) = ?
    ''', (user_id, today))
    
    count = cursor.fetchone()[0]
    conn.close()
    return count

def log_request(user_id, request_type):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO requests (user_id, request_date, request_type)
    VALUES (?, ?, ?)
    ''', (user_id, datetime.now().isoformat(), request_type))
    
    conn.commit()
    conn.close()

def get_settings():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT 
        free_daily_requests, 
        premium_daily_requests, 
        subscription_price 
    FROM settings 
    LIMIT 1
    ''')
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            'free_daily_requests': result[0],
            'premium_daily_requests': result[1],
            'subscription_price': result[2]
        }
    return None

def update_settings(free_daily=None, premium_daily=None, price=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    current = get_settings()
    if not current:
        conn.close()
        return False
    
    if free_daily is None:
        free_daily = current['free_daily_requests']
    if premium_daily is None:
        premium_daily = current['premium_daily_requests']
    if price is None:
        price = current['subscription_price']
    
    try:
        cursor.execute('''
        UPDATE settings
        SET 
            free_daily_requests = ?,
            premium_daily_requests = ?,
            subscription_price = ?
        ''', (free_daily, premium_daily, price))
        
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        return False
    finally:
        conn.close()

def get_bot_stats():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('''
    SELECT COUNT(DISTINCT user_id) 
    FROM subscriptions 
    WHERE subscription_type = 'premium' AND end_date > ?
    ''', (datetime.now().isoformat(),))
    premium_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM requests')
    total_requests = cursor.fetchone()[0]
    
    conn.close()
    
    return {
        'total_users': total_users,
        'premium_users': premium_users,
        'total_requests': total_requests
    }

async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    settings = get_settings()
    subscription = get_user_subscription(user.id)
    
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ\n\n"
        f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription['name']}\n"
        f"–õ–∏–º–∏—Ç—ã:\n"
        f"- –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {settings['free_daily_requests'] if subscription['type'] == 'free' else settings['premium_daily_requests']}\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/video [—Å—Å—ã–ª–∫–∞] [–ø—Ä–æ–º—Ç] - –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ\n"
        "/buy - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
    )
    
    if user.id in ADMIN_IDS:
        text += "\n\n–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    await update.message.reply_text(text)

async def video_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /video —Å –ø–æ—à–∞–≥–æ–≤—ã–º –≤–≤–æ–¥–æ–º"""
    user = update.effective_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    subscription = get_user_subscription(user.id)
    settings = get_settings()
    daily_requests = get_today_requests_count(user.id)
    
    max_requests = settings['free_daily_requests'] if subscription['type'] == 'free' else settings['premium_daily_requests']
    
    if daily_requests >= max_requests:
        await update.message.reply_text(
            f"‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({max_requests}).\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return
    
    context.user_data['awaiting_video_url'] = True
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
    )


async def send_results(update: Update, result_url: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        keyboard = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", url=result_url)]]
        await update.message.reply_text(
            "–°—Å—ã–ª–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤–∞!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        await update.message.reply_text(f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:\n{result_url}")

async def buy_subscription(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    settings = get_settings()
    
    price = settings['subscription_price']

    title = "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞"
    description = (
        f"–î–æ—Å—Ç—É–ø–Ω–æ {settings['premium_daily_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
        "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    payload = f"subscription_{user.id}"
    currency = "XTR"
    prices = [LabeledPrice("–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", price)]
    
    await context.bot.send_invoice(
        chat_id=user.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
        start_parameter="premium_subscription",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )

async def precheckout_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É"""
    user = update.effective_user
    payment = update.message.successful_payment
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    end_date = datetime.now() + timedelta(days=30)
    cursor.execute('''
    INSERT INTO subscriptions (user_id, subscription_type, start_date, end_date)
    VALUES (?, ?, ?, ?)
    ''', (user.id, 'premium', datetime.now().isoformat(), end_date.isoformat()))
    
    conn.commit()
    conn.close()
    
    settings = get_settings()
    
    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É.\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {settings['premium_daily_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date.strftime('%d.%m.%Y')}"
    )

async def process_video_async(update: Update, context: CallbackContext, video_url: str, prompt: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
            screenshot_path = tmp_file.name
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º new.py –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        process = await asyncio.create_subprocess_exec(
            'python', 
            NEW_SCRIPT_PATH, 
            video_url, 
            prompt,
            screenshot_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è new.py: {stderr.decode()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        if os.path.exists(screenshot_path):
            with open(screenshot_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=InputFile(photo),
                    caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"
                )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        screenshots_dir = os.path.join(os.path.dirname(screenshot_path), "screenshots")
        if os.path.exists(screenshots_dir):
            screenshots = [f for f in os.listdir(screenshots_dir) if f.endswith('.png')]
            if not screenshots:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                for screenshot_file in sorted(screenshots):
                    file_path = os.path.join(screenshots_dir, screenshot_file)
                    try:
                        with open(file_path, 'rb') as photo:
                            await update.message.reply_photo(
                                photo=InputFile(photo),
                                caption=f"–§—Ä–∞–≥–º–µ–Ω—Ç {screenshot_file.replace('.png', '')}"
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {file_path}: {str(e)}")
        
        log_request(user.id, 'video_analysis')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(screenshot_path):
            os.remove(screenshot_path)
        
        screenshots_dir = os.path.join(os.path.dirname(screenshot_path), "screenshots")
        if os.path.exists(screenshots_dir):
            for screenshot_file in os.listdir(screenshots_dir):
                if screenshot_file.endswith('.png'):
                    os.remove(os.path.join(screenshots_dir, screenshot_file))
            os.rmdir(screenshots_dir)

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    text = update.message.text.strip()
    
    if context.user_data.get('awaiting_video_url'):
        if is_valid_url(text):
            clean_url = clean_video_url(text)
            if 'youtube.com' in clean_url or 'youtu.be' in clean_url:
                context.user_data['video_url'] = clean_url
                context.user_data['awaiting_video_url'] = False
                context.user_data['awaiting_prompt'] = True
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
            else:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    elif context.user_data.get('awaiting_prompt'):
        prompt = text
        video_url = context.user_data['video_url']
        
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(process_video_async(update, context, video_url, prompt))
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if 'video_url' in context.user_data:
            del context.user_data['video_url']
        if 'awaiting_prompt' in context.user_data:
            del context.user_data['awaiting_prompt']
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    elif text.startswith('/'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏.")
        

async def admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    text = (
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "/set_free_requests - –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/set_premium_requests - –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/set_price - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/broadcast - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
    )
    
    await update.message.reply_text(text)

async def admin_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    stats = get_bot_stats()
    settings = get_settings()
    
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['premium_users']}\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n\n"
        "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"- –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {settings['subscription_price'] / 100:.2f} {SUBSCRIPTION_TYPES['premium']['currency']}\n"
        f"- –ó–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏): {settings['free_daily_requests']}\n"
        f"- –ó–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å (—Å –ø–æ–¥–ø–∏—Å–∫–æ–π): {settings['premium_daily_requests']}\n"
    )
    
    await update.message.reply_text(text)

async def set_free_requests(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_free_requests <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    try:
        value = int(context.args[0])
        if value < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1")
        
        if update_settings(free_daily=value):
            SUBSCRIPTION_TYPES['free']['daily_requests'] = value
            response = f"‚úÖ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏) –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {value}"
        else:
            raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        await update.message.reply_text(response)
    
    except ValueError as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        await update.message.reply_text(error_msg)

async def set_premium_requests(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_premium_requests <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    try:
        value = int(context.args[0])
        if value < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1")
        
        if update_settings(premium_daily=value):
            SUBSCRIPTION_TYPES['premium']['daily_requests'] = value
            response = f"‚úÖ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å (—Å –ø–æ–¥–ø–∏—Å–∫–æ–π) –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {value}"
        else:
            raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        await update.message.reply_text(response)
    
    except ValueError as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        await update.message.reply_text(error_msg)

async def set_price(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_price <—Ü–µ–Ω–∞ –≤ {SUBSCRIPTION_TYPES['premium']['currency']}>")
        return
    
    try:
        value = int(float(context.args[0]) * 100)
        if value <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if update_settings(price=value):
            SUBSCRIPTION_TYPES['premium']['price'] = value
            response = f"‚úÖ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {value / 100:.2f} {SUBSCRIPTION_TYPES['premium']['currency']}"
        else:
            raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        await update.message.reply_text(response)
    
    except ValueError as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        await update.message.reply_text(error_msg)

async def broadcast(update: Update, context: CallbackContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    message = ' '.join(context.args)
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    conn.close()
    
    success = 0
    failed = 0
    
    for (user_id,) in users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}"
            )
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            failed += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )
            
def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
    parsed = urllib.parse.urlparse(url)
    return all([parsed.scheme, parsed.netloc])

def clean_video_url(url: str) -> str:
    """–û—á–∏—â–∞–µ—Ç URL –≤–∏–¥–µ–æ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if 'youtube.com' in url or 'youtu.be' in url:
        return url.split('&')[0]
    return url


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    init_db()
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("video", video_command))
    application.add_handler(CommandHandler("buy", buy_subscription))
    application.add_handler(CommandHandler("admin", admin_panel))
    
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("set_free_requests", set_free_requests))
    application.add_handler(CommandHandler("set_premium_requests", set_premium_requests))
    application.add_handler(CommandHandler("set_price", set_price))
    application.add_handler(CommandHandler("broadcast", broadcast))
    
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()